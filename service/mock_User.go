// Code generated by mockery 2.9.0. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: userName, password
func (_m *MockUser) CreateUser(userName string, password string) error {
	ret := _m.Called(userName, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userName, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userID
func (_m *MockUser) DeleteUser(userID string) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockUser) GetUserByID(userID string) (*UserInfo, error) {
	ret := _m.Called(userID)

	var r0 *UserInfo
	if rf, ok := ret.Get(0).(func(string) *UserInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPassword provides a mock function with given fields: userName
func (_m *MockUser) GetUserPassword(userName string) (string, string, error) {
	ret := _m.Called(userName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(userName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields:
func (_m *MockUser) List() ([]*UserInfo, error) {
	ret := _m.Called()

	var r0 []*UserInfo
	if rf, ok := ret.Get(0).(func() []*UserInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: userID, userName
func (_m *MockUser) UpdateName(userID string, userName string) error {
	ret := _m.Called(userID, userName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: userID, password
func (_m *MockUser) UpdatePassword(userID string, password string) error {
	ret := _m.Called(userID, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

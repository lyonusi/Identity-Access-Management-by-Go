// Code generated by mockery 2.9.0. DO NOT EDIT.

package repo

import mock "github.com/stretchr/testify/mock"

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: userID, userName, password
func (_m *MockUser) CreateUser(userID string, userName string, password string) error {
	ret := _m.Called(userID, userName, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, userName, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: UserID
func (_m *MockUser) DeleteUser(UserID string) error {
	ret := _m.Called(UserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockUser) GetUserByID(userID string) (*UserInfo, error) {
	ret := _m.Called(userID)

	var r0 *UserInfo
	if rf, ok := ret.Get(0).(func(string) *UserInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByName provides a mock function with given fields: userID
func (_m *MockUser) GetUserByName(userID string) (*UserInfo, error) {
	ret := _m.Called(userID)

	var r0 *UserInfo
	if rf, ok := ret.Get(0).(func(string) *UserInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MockUser) List() ([]*UserInfo, error) {
	ret := _m.Called()

	var r0 []*UserInfo
	if rf, ok := ret.Get(0).(func() []*UserInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *MockUser) Update(_a0 UserInfo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(UserInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
